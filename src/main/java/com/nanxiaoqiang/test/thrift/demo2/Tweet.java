/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.nanxiaoqiang.test.thrift.demo2;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-3-22")
public class Tweet implements org.apache.thrift.TBase<Tweet, Tweet._Fields>, java.io.Serializable, Cloneable, Comparable<Tweet> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Tweet");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("msg", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField LOC_FIELD_DESC = new org.apache.thrift.protocol.TField("loc", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField LAUAGUE_FIELD_DESC = new org.apache.thrift.protocol.TField("lauague", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TWEET_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("tweetType", org.apache.thrift.protocol.TType.I32, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TweetStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TweetTupleSchemeFactory());
  }

  public int id; // required
  public String msg; // required
  public long time; // required
  public Location loc; // optional
  public String lauague; // optional
  /**
   * 
   * @see TweetType
   */
  public TweetType tweetType; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    MSG((short)2, "msg"),
    TIME((short)3, "time"),
    LOC((short)4, "loc"),
    LAUAGUE((short)5, "lauague"),
    /**
     * 
     * @see TweetType
     */
    TWEET_TYPE((short)6, "tweetType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // MSG
          return MSG;
        case 3: // TIME
          return TIME;
        case 4: // LOC
          return LOC;
        case 5: // LAUAGUE
          return LAUAGUE;
        case 6: // TWEET_TYPE
          return TWEET_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __TIME_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.LOC,_Fields.LAUAGUE,_Fields.TWEET_TYPE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MSG, new org.apache.thrift.meta_data.FieldMetaData("msg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LOC, new org.apache.thrift.meta_data.FieldMetaData("loc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "Location")));
    tmpMap.put(_Fields.LAUAGUE, new org.apache.thrift.meta_data.FieldMetaData("lauague", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TWEET_TYPE, new org.apache.thrift.meta_data.FieldMetaData("tweetType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TweetType.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Tweet.class, metaDataMap);
  }

  public Tweet() {
    this.lauague = "chinese";

    this.tweetType = com.nanxiaoqiang.test.thrift.demo2.TweetType.TWEET;

  }

  public Tweet(
    int id,
    String msg,
    long time)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.msg = msg;
    this.time = time;
    setTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Tweet(Tweet other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetMsg()) {
      this.msg = other.msg;
    }
    this.time = other.time;
    if (other.isSetLoc()) {
      this.loc = other.loc;
    }
    if (other.isSetLauague()) {
      this.lauague = other.lauague;
    }
    if (other.isSetTweetType()) {
      this.tweetType = other.tweetType;
    }
  }

  public Tweet deepCopy() {
    return new Tweet(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.msg = null;
    setTimeIsSet(false);
    this.time = 0;
    this.loc = null;
    this.lauague = "chinese";

    this.tweetType = com.nanxiaoqiang.test.thrift.demo2.TweetType.TWEET;

  }

  public int getId() {
    return this.id;
  }

  public Tweet setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getMsg() {
    return this.msg;
  }

  public Tweet setMsg(String msg) {
    this.msg = msg;
    return this;
  }

  public void unsetMsg() {
    this.msg = null;
  }

  /** Returns true if field msg is set (has been assigned a value) and false otherwise */
  public boolean isSetMsg() {
    return this.msg != null;
  }

  public void setMsgIsSet(boolean value) {
    if (!value) {
      this.msg = null;
    }
  }

  public long getTime() {
    return this.time;
  }

  public Tweet setTime(long time) {
    this.time = time;
    setTimeIsSet(true);
    return this;
  }

  public void unsetTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIME_ISSET_ID);
  }

  /** Returns true if field time is set (has been assigned a value) and false otherwise */
  public boolean isSetTime() {
    return EncodingUtils.testBit(__isset_bitfield, __TIME_ISSET_ID);
  }

  public void setTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIME_ISSET_ID, value);
  }

  public Location getLoc() {
    return this.loc;
  }

  public Tweet setLoc(Location loc) {
    this.loc = loc;
    return this;
  }

  public void unsetLoc() {
    this.loc = null;
  }

  /** Returns true if field loc is set (has been assigned a value) and false otherwise */
  public boolean isSetLoc() {
    return this.loc != null;
  }

  public void setLocIsSet(boolean value) {
    if (!value) {
      this.loc = null;
    }
  }

  public String getLauague() {
    return this.lauague;
  }

  public Tweet setLauague(String lauague) {
    this.lauague = lauague;
    return this;
  }

  public void unsetLauague() {
    this.lauague = null;
  }

  /** Returns true if field lauague is set (has been assigned a value) and false otherwise */
  public boolean isSetLauague() {
    return this.lauague != null;
  }

  public void setLauagueIsSet(boolean value) {
    if (!value) {
      this.lauague = null;
    }
  }

  /**
   * 
   * @see TweetType
   */
  public TweetType getTweetType() {
    return this.tweetType;
  }

  /**
   * 
   * @see TweetType
   */
  public Tweet setTweetType(TweetType tweetType) {
    this.tweetType = tweetType;
    return this;
  }

  public void unsetTweetType() {
    this.tweetType = null;
  }

  /** Returns true if field tweetType is set (has been assigned a value) and false otherwise */
  public boolean isSetTweetType() {
    return this.tweetType != null;
  }

  public void setTweetTypeIsSet(boolean value) {
    if (!value) {
      this.tweetType = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case MSG:
      if (value == null) {
        unsetMsg();
      } else {
        setMsg((String)value);
      }
      break;

    case TIME:
      if (value == null) {
        unsetTime();
      } else {
        setTime((Long)value);
      }
      break;

    case LOC:
      if (value == null) {
        unsetLoc();
      } else {
        setLoc((Location)value);
      }
      break;

    case LAUAGUE:
      if (value == null) {
        unsetLauague();
      } else {
        setLauague((String)value);
      }
      break;

    case TWEET_TYPE:
      if (value == null) {
        unsetTweetType();
      } else {
        setTweetType((TweetType)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case MSG:
      return getMsg();

    case TIME:
      return Long.valueOf(getTime());

    case LOC:
      return getLoc();

    case LAUAGUE:
      return getLauague();

    case TWEET_TYPE:
      return getTweetType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case MSG:
      return isSetMsg();
    case TIME:
      return isSetTime();
    case LOC:
      return isSetLoc();
    case LAUAGUE:
      return isSetLauague();
    case TWEET_TYPE:
      return isSetTweetType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Tweet)
      return this.equals((Tweet)that);
    return false;
  }

  public boolean equals(Tweet that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_msg = true && this.isSetMsg();
    boolean that_present_msg = true && that.isSetMsg();
    if (this_present_msg || that_present_msg) {
      if (!(this_present_msg && that_present_msg))
        return false;
      if (!this.msg.equals(that.msg))
        return false;
    }

    boolean this_present_time = true;
    boolean that_present_time = true;
    if (this_present_time || that_present_time) {
      if (!(this_present_time && that_present_time))
        return false;
      if (this.time != that.time)
        return false;
    }

    boolean this_present_loc = true && this.isSetLoc();
    boolean that_present_loc = true && that.isSetLoc();
    if (this_present_loc || that_present_loc) {
      if (!(this_present_loc && that_present_loc))
        return false;
      if (!this.loc.equals(that.loc))
        return false;
    }

    boolean this_present_lauague = true && this.isSetLauague();
    boolean that_present_lauague = true && that.isSetLauague();
    if (this_present_lauague || that_present_lauague) {
      if (!(this_present_lauague && that_present_lauague))
        return false;
      if (!this.lauague.equals(that.lauague))
        return false;
    }

    boolean this_present_tweetType = true && this.isSetTweetType();
    boolean that_present_tweetType = true && that.isSetTweetType();
    if (this_present_tweetType || that_present_tweetType) {
      if (!(this_present_tweetType && that_present_tweetType))
        return false;
      if (!this.tweetType.equals(that.tweetType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_msg = true && (isSetMsg());
    list.add(present_msg);
    if (present_msg)
      list.add(msg);

    boolean present_time = true;
    list.add(present_time);
    if (present_time)
      list.add(time);

    boolean present_loc = true && (isSetLoc());
    list.add(present_loc);
    if (present_loc)
      list.add(loc);

    boolean present_lauague = true && (isSetLauague());
    list.add(present_lauague);
    if (present_lauague)
      list.add(lauague);

    boolean present_tweetType = true && (isSetTweetType());
    list.add(present_tweetType);
    if (present_tweetType)
      list.add(tweetType.getValue());

    return list.hashCode();
  }

  @Override
  public int compareTo(Tweet other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMsg()).compareTo(other.isSetMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msg, other.msg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoc()).compareTo(other.isSetLoc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loc, other.loc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLauague()).compareTo(other.isSetLauague());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLauague()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lauague, other.lauague);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTweetType()).compareTo(other.isSetTweetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTweetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tweetType, other.tweetType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Tweet(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("msg:");
    if (this.msg == null) {
      sb.append("null");
    } else {
      sb.append(this.msg);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("time:");
    sb.append(this.time);
    first = false;
    if (isSetLoc()) {
      if (!first) sb.append(", ");
      sb.append("loc:");
      if (this.loc == null) {
        sb.append("null");
      } else {
        sb.append(this.loc);
      }
      first = false;
    }
    if (isSetLauague()) {
      if (!first) sb.append(", ");
      sb.append("lauague:");
      if (this.lauague == null) {
        sb.append("null");
      } else {
        sb.append(this.lauague);
      }
      first = false;
    }
    if (isSetTweetType()) {
      if (!first) sb.append(", ");
      sb.append("tweetType:");
      if (this.tweetType == null) {
        sb.append("null");
      } else {
        sb.append(this.tweetType);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TweetStandardSchemeFactory implements SchemeFactory {
    public TweetStandardScheme getScheme() {
      return new TweetStandardScheme();
    }
  }

  private static class TweetStandardScheme extends StandardScheme<Tweet> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Tweet struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.msg = iprot.readString();
              struct.setMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.time = iprot.readI64();
              struct.setTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LOC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.loc = new Location();
              struct.loc.read(iprot);
              struct.setLocIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LAUAGUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lauague = iprot.readString();
              struct.setLauagueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TWEET_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tweetType = com.nanxiaoqiang.test.thrift.demo2.TweetType.findByValue(iprot.readI32());
              struct.setTweetTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Tweet struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.msg != null) {
        oprot.writeFieldBegin(MSG_FIELD_DESC);
        oprot.writeString(struct.msg);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TIME_FIELD_DESC);
      oprot.writeI64(struct.time);
      oprot.writeFieldEnd();
      if (struct.loc != null) {
        if (struct.isSetLoc()) {
          oprot.writeFieldBegin(LOC_FIELD_DESC);
          struct.loc.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.lauague != null) {
        if (struct.isSetLauague()) {
          oprot.writeFieldBegin(LAUAGUE_FIELD_DESC);
          oprot.writeString(struct.lauague);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tweetType != null) {
        if (struct.isSetTweetType()) {
          oprot.writeFieldBegin(TWEET_TYPE_FIELD_DESC);
          oprot.writeI32(struct.tweetType.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TweetTupleSchemeFactory implements SchemeFactory {
    public TweetTupleScheme getScheme() {
      return new TweetTupleScheme();
    }
  }

  private static class TweetTupleScheme extends TupleScheme<Tweet> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Tweet struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetMsg()) {
        optionals.set(1);
      }
      if (struct.isSetTime()) {
        optionals.set(2);
      }
      if (struct.isSetLoc()) {
        optionals.set(3);
      }
      if (struct.isSetLauague()) {
        optionals.set(4);
      }
      if (struct.isSetTweetType()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetMsg()) {
        oprot.writeString(struct.msg);
      }
      if (struct.isSetTime()) {
        oprot.writeI64(struct.time);
      }
      if (struct.isSetLoc()) {
        struct.loc.write(oprot);
      }
      if (struct.isSetLauague()) {
        oprot.writeString(struct.lauague);
      }
      if (struct.isSetTweetType()) {
        oprot.writeI32(struct.tweetType.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Tweet struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.msg = iprot.readString();
        struct.setMsgIsSet(true);
      }
      if (incoming.get(2)) {
        struct.time = iprot.readI64();
        struct.setTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.loc = new Location();
        struct.loc.read(iprot);
        struct.setLocIsSet(true);
      }
      if (incoming.get(4)) {
        struct.lauague = iprot.readString();
        struct.setLauagueIsSet(true);
      }
      if (incoming.get(5)) {
        struct.tweetType = com.nanxiaoqiang.test.thrift.demo2.TweetType.findByValue(iprot.readI32());
        struct.setTweetTypeIsSet(true);
      }
    }
  }

}

